function startExportedGame() {
    attachCanvas(document.querySelector("canvas")), load_game(document.getElementById("exportedGameData").text.slice(1))
}

function Font() {
    this.getData = function() {
        return e
    }, this.getChar = function(t) {
        var i = 48 * t.charCodeAt(0);
        return e.slice(i, i + 48)
    };
    var e = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
}

function Script() {
    function e(e, t, i) {
        if (void 0 != t[0] && null != t[0]) {
            var n = "" + t[0];
            e.GetDialogBuffer().AddText(n, function() {
                i(null)
            })
        } else i(null)
    }

    function t(e, t, i) {
        e.GetDialogBuffer().AddLinebreak(), i(null)
    }

    function i(e, t, i) {
        var n = t[0];
        names.item.has(n) && (n = names.item.get(n)), i(player().inventory[n] ? player().inventory[n] : 0)
    }

    function n(e, t) {
        e.GetDialogBuffer().HasTextEffect(t) ? e.GetDialogBuffer().RemoveTextEffect(t) : e.GetDialogBuffer().AddTextEffect(t)
    }

    function r(e, t, i) {
        n(e, "rbw"), i(null)
    }

    function o(e, t, i) {
        n(e, "clr1"), i(null)
    }

    function a(e, t, i) {
        n(e, "clr2"), i(null)
    }

    function l(e, t, i) {
        n(e, "clr3"), i(null)
    }

    function s(e, t, i) {
        n(e, "wvy"), i(null)
    }

    function u(e, t, i) {
        n(e, "shk"), i(null)
    }

    function c(e, t, i, n) {
        "variable" == t.type ? i.Eval(e, function(i) {
            e.SetVariable(t.name, i), t.Eval(e, function(e) {
                n(e)
            })
        }) : n(null)
    }

    function f(e, t, i, n) {
        i.Eval(e, function(i) {
            t.Eval(e, function(e) {
                n(e === i)
            })
        })
    }

    function d(e, t, i, n) {
        i.Eval(e, function(i) {
            t.Eval(e, function(e) {
                n(e > i)
            })
        })
    }

    function h(e, t, i, n) {
        i.Eval(e, function(i) {
            t.Eval(e, function(e) {
                n(e < i)
            })
        })
    }

    function g(e, t, i, n) {
        i.Eval(e, function(i) {
            t.Eval(e, function(e) {
                n(e >= i)
            })
        })
    }

    function p(e, t, i, n) {
        i.Eval(e, function(i) {
            t.Eval(e, function(e) {
                n(e <= i)
            })
        })
    }

    function m(e, t, i, n) {
        i.Eval(e, function(i) {
            t.Eval(e, function(e) {
                n(e * i)
            })
        })
    }

    function v(e, t, i, n) {
        i.Eval(e, function(i) {
            t.Eval(e, function(e) {
                n(e / i)
            })
        })
    }

    function y(e, t, i, n) {
        i.Eval(e, function(i) {
            t.Eval(e, function(e) {
                n(e + i)
            })
        })
    }

    function w(e, t, i, n) {
        i.Eval(e, function(i) {
            t.Eval(e, function(e) {
                n(e - i)
            })
        })
    }

    function D(e) {
        for (var t = "", i = 0; i < e; i++) t += "  ";
        return t
    }

    function C(e) {
        return I(e) || x(e)
    }

    function I(e) {
        if ("block" === e.type && e.children.length > 0 && "function" === e.children[0].type) {
            var t = e.children[0];
            if ("clr1" === t.name || "clr2" === t.name || "clr3" === t.name || "wvy" === t.name || "shk" === t.name || "rbw" === t.name) return !0
        }
        return !1
    }

    function x(e) {
        if ("block" === e.type && e.children.length > 0) {
            var t = e.children[0];
            if ("sequence" === t.type || "cycle" === t.type || "shuffle" === t.type || "if" === t.type) return !0
        }
        return !1
    }
    this.CreateInterpreter = function() {
        return new S
    }, this.CreateUtils = function() {
        return new E
    };
    var S = function() {
            var e = new P,
                t = new G(e);
            this.SetDialogBuffer = function(t) {
                e.SetDialogBuffer(t)
            }, this.Compile = function(i, n) {
                var r = t.Parse(n);
                e.SetScript(i, r)
            }, this.Run = function(t, i) {
                e.GetScript(t).Eval(e, function() {
                    null != i && i()
                })
            }, this.Interpret = function(i, n) {
                t.Parse(i).Eval(e, function() {
                    null != n && n()
                })
            }, this.HasScript = function(t) {
                return e.HasScript(t)
            }, this.ResetEnvironment = function() {
                e = new P, t = new G(e)
            }, this.ReadDialogScript = function(e, i) {
                return t.ReadDialogScript(e, i)
            }, this.Parse = function(e) {
                return t.Parse(e)
            }, this.Eval = function(t, i) {
                t.Eval(e, function() {
                    null != i && i()
                })
            }, this.CreateExpression = function(e) {
                return t.CreateExpression(e)
            }, this.SetVariable = function(t, i, n) {
                e.SetVariable(t, i, n)
            }, this.DeleteVariable = function(t, i) {
                e.DeleteVariable(t, i)
            }, this.HasVariable = function(t) {
                return e.HasVariable(t)
            }, this.SetOnVariableChangeHandler = function(t) {
                e.SetOnVariableChangeHandler(t)
            }, this.GetVariableNames = function() {
                return e.GetVariableNames()
            }, this.GetVariable = function(t) {
                return e.GetVariable(t)
            }
        },
        E = function() {
            this.CreateDialogBlock = function(e, t) {
                void 0 === t && (t = !0);
                for (var i = new M(A.Dialog, t), n = 0; n < e.length; n++) i.AddChild(e[n]);
                return i
            }, this.ChangeSequenceType = function(e, t) {
                return "sequence" === t ? new N(e.options) : "cycle" === t ? new _(e.options) : "shuffle" === t ? new F(e.options) : e
            }, this.CreateSequenceBlock = function() {
                var e = new M(A.Dialog, !1),
                    t = new M(A.Dialog, !1),
                    i = new N([e, t]),
                    n = new M(A.Code);
                return n.AddChild(i), n
            }, this.CreateIfBlock = function() {
                var e = new M(A.Code);
                e.AddChild(new k("item", [new R("0")]));
                var t = new R(1),
                    i = new O("==", e, t),
                    n = new B,
                    r = new M(A.Dialog),
                    o = new M(A.Dialog),
                    a = new V([i, n], [r, o]),
                    l = new M(A.Code);
                return l.AddChild(a), l
            }
        },
        P = function() {
            var n = null;
            this.SetDialogBuffer = function(e) {
                n = e
            }, this.GetDialogBuffer = function() {
                return n
            };
            var D = new Map;
            D.set("say", e), D.set("br", t), D.set("item", i), D.set("rbw", r), D.set("clr1", o), D.set("clr2", a), D.set("clr3", l), D.set("wvy", s), D.set("shk", u), this.HasFunction = function(e) {
                return D.has(e)
            }, this.EvalFunction = function(e, t, i) {
                D.get(e)(this, t, i)
            };
            var C = new Map;
            this.HasVariable = function(e) {
                return C.has(e)
            }, this.GetVariable = function(e) {
                return C.get(e)
            }, this.SetVariable = function(e, t, i) {
                void 0 === i && (i = !0), C.set(e, t), null != S && i && S(e)
            }, this.DeleteVariable = function(e, t) {
                void 0 === t && (t = !0), C.has(e) && (C.delete(e), null != S && t && S(e))
            };
            var I = new Map;
            I.set("=", c), I.set("==", f), I.set(">", d), I.set("<", h), I.set(">=", g), I.set("<=", p), I.set("*", m), I.set("/", v), I.set("+", y), I.set("-", w), this.HasOperator = function(e) {
                return I.get(e)
            }, this.EvalOperator = function(e, t, i, n) {
                I.get(e)(this, t, i, n)
            };
            var x = new Map;
            this.HasScript = function(e) {
                return x.has(e)
            }, this.GetScript = function(e) {
                return x.get(e)
            }, this.SetScript = function(e, t) {
                x.set(e, t)
            };
            var S = null;
            this.SetOnVariableChangeHandler = function(e) {
                S = e
            }, this.GetVariableNames = function() {
                return Array.from(C.keys())
            }
        },
        T = function() {
            this.parent = null, this.children = [], this.AddChild = function(e) {
                this.children.push(e), e.parent = this
            }, this.VisitAll = function(e) {
                e.Visit(this);
                for (var t = 0; t < this.children.length; t++) this.children[t].VisitAll(e)
            }
        },
        A = {
            Code: "code",
            Dialog: "dialog"
        },
        M = function(e, t) {
            Object.assign(this, new T), this.type = "block", this.mode = e, this.Eval = function(e, t) {
                function i(t, o) {
                    r < t.length ? t[r].Eval(e, function(e) {
                        n = e, r++, i(t, o)
                    }) : o()
                }
                null != this.onEnter && this.onEnter();
                var n = null,
                    r = 0,
                    o = this;
                i(this.children, function() {
                    null != o.onExit && o.onExit(), t(n)
                })
            }, void 0 === t && (t = !0), this.Serialize = function(e) {
                void 0 === e && (e = 0), console.log("SERIALIZE BLOCK!!!"), console.log(e), console.log(t);
                var i = "",
                    n = null;
                this.mode === A.Code && (i += "{");
                for (var r = 0; r < this.children.length; r++) {
                    var o = this.children[r];
                    "block" !== o.type || !n || "block" !== n.type || C(o) || C(n) || (i += "\n");
                    var a = 0 == r && t,
                        l = n && "function" === n.type && "br" === n.name;
                    this.mode === A.Dialog && (a || l) && (i += D(e)), i += o.Serialize(e), n = o
                }
                return this.mode === A.Code && (i += "}"), i
            }
        },
        k = function(e, arguments) {
            Object.assign(this, new T), this.type = "function", this.name = e, this.arguments = arguments, this.Eval = function(e, t) {
                function i(arguments, t) {
                    r < arguments.length ? arguments[r].Eval(e, function(e) {
                        n.push(e), r++, i(arguments, t)
                    }) : t()
                }
                null != this.onEnter && this.onEnter();
                var n = [],
                    r = 0,
                    o = this;
                i(this.arguments, function() {
                    null != o.onExit && o.onExit(), e.EvalFunction(o.name, n, t)
                })
            }, this.Serialize = function(e) {
                var t = this.parent.mode && this.parent.mode === A.Dialog;
                if (t && "say" === this.name) return this.arguments[0].value;
                if (t && "br" === this.name) return "\n";
                var i = "";
                i += this.name;
                for (var n = 0; n < this.arguments.length; n++) i += " ", i += this.arguments[n].Serialize(e);
                return i
            }
        },
        R = function(e) {
            Object.assign(this, new T), this.type = "literal", this.value = e, this.Eval = function(e, t) {
                t(this.value)
            }, this.Serialize = function(e) {
                var t = "";
                return null === this.value ? t : ("string" == typeof this.value && (t += '"'), t += this.value, "string" == typeof this.value && (t += '"'), t)
            }
        },
        b = function(e) {
            Object.assign(this, new T), this.type = "variable", this.name = e, this.Eval = function(e, t) {
                t(e.HasVariable(this.name) ? e.GetVariable(this.name) : null)
            }, this.Serialize = function(e) {
                return "" + this.name
            }
        },
        O = function(e, t, i) {
            Object.assign(this, new T), this.type = "operator", this.operator = e, this.left = t, this.right = i, this.Eval = function(e, t) {
                e.EvalOperator(this.operator, this.left, this.right, function(e) {
                    t(e)
                })
            }, this.Serialize = function(e) {
                if ("-" === this.operator && "literal" === this.left.type && null === this.left.value) return this.operator + this.right.Serialize(e);
                var t = "";
                return t += this.left.Serialize(e), t += " " + this.operator + " ", t += this.right.Serialize(e)
            }, this.VisitAll = function(e) {
                e.Visit(this), null != this.left && this.left.VisitAll(e), null != this.right && this.right.VisitAll(e)
            }
        },
        L = function() {
            this.Serialize = function(e) {
                var t = "";
                t += this.type + "\n";
                for (var i = 0; i < this.options.length; i++) t += D(e + 1) + z.List + " " + this.options[i].Serialize(e + 2) + "\n";
                return t += D(e)
            }, this.VisitAll = function(e) {
                e.Visit(this);
                for (var t = 0; t < this.options.length; t++) this.options[t].VisitAll(e)
            }
        },
        N = function(e) {
            Object.assign(this, new T), Object.assign(this, new L), this.type = "sequence", this.options = e;
            var t = 0;
            this.Eval = function(e, i) {
                this.options[t].Eval(e, i);
                var n = t + 1;
                n < this.options.length && (t = n)
            }
        },
        _ = function(e) {
            Object.assign(this, new T), Object.assign(this, new L), this.type = "cycle", this.options = e;
            var t = 0;
            this.Eval = function(e, i) {
                this.options[t].Eval(e, i);
                var n = t + 1;
                t = n < this.options.length ? n : 0
            }
        },
        F = function(e) {
            function t(e) {
                i = [];
                for (var t = e.slice(); t.length > 0;) {
                    var n = Math.floor(Math.random() * t.length);
                    i.push(t.splice(n, 1)[0])
                }
            }
            Object.assign(this, new T), Object.assign(this, new L), this.type = "shuffle", this.options = e;
            var i = [];
            t(this.options);
            var n = 0;
            this.Eval = function(e, r) {
                i[n].Eval(e, r), ++n >= this.options.length && (t(this.options), n = 0)
            }
        },
        V = function(e, t, i) {
            Object.assign(this, new T), this.type = "if", this.conditions = e, this.results = t, this.Eval = function(e, t) {
                function i() {
                    r.conditions[n].Eval(e, function(o) {
                        1 == o ? r.results[n].Eval(e, t) : n + 1 < r.conditions.length ? (n++, i()) : t(null)
                    })
                }
                var n = 0,
                    r = this;
                i()
            }, void 0 === i && (i = !1), this.Serialize = function(e) {
                var t = "";
                if (i) t += this.conditions[0].Serialize() + " ? " + this.results[0].Serialize(), this.conditions.length > 1 && "else" === this.conditions[1].type && (t += " : " + this.results[1].Serialize());
                else {
                    t += "\n";
                    for (var n = 0; n < this.conditions.length; n++) t += D(e + 1) + z.List + " " + this.conditions[n].Serialize(e) + " ?\n", t += this.results[n].Serialize(e + 2) + "\n";
                    t += D(e)
                }
                return t
            }, this.IsSingleLine = function() {
                return i
            }, this.VisitAll = function(e) {
                for (e.Visit(this), t = 0; t < this.conditions.length; t++) this.conditions[t].VisitAll(e);
                for (var t = 0; t < this.results.length; t++) this.results[t].VisitAll(e)
            }
        },
        B = function() {
            Object.assign(this, new T), this.type = "else", this.Eval = function(e, t) {
                t(!0)
            }, this.Serialize = function() {
                return "else"
            }
        },
        z = {
            DialogOpen: '"""',
            DialogClose: '"""',
            CodeOpen: "{",
            CodeClose: "}",
            Linebreak: "\n",
            Separator: ":",
            List: "-",
            String: '"'
        },
        G = function(e) {
            function t(e) {
                e.Print();
                for (var t = !1, i = !1, n = !0, r = "", o = function() {
                        r.length > 0 && (e.curNode.AddChild(new k("say", [new R(r)])), r = "", i = !0)
                    }; !e.Done();)
                    if (e.MatchAhead(z.CodeOpen)) {
                        o();
                        var a = (e = f(e)).curNode.children.length;
                        a > 0 && "block" === e.curNode.children[a - 1].type && x(e.curNode.children[a - 1]) && (i = !0), t = !0
                    } else {
                        if (e.MatchAhead(z.Linebreak)) {
                            o();
                            var l = e.Index() + 1 == e.Count(),
                                s = !t && !i && !(n || l);
                            (i || s) && !l && e.curNode.AddChild(new k("br", [])), n = !1, t = !1, i = !1, r = ""
                        } else r += e.Char();
                        e.Step()
                    }
                return o(), e
            }

            function i(e) {
                for (var i = [], n = [], r = -1, o = !0, a = !1, l = 0; !e.Done();) {
                    e.Char() === z.CodeOpen ? l++ : e.Char() === z.CodeClose && l--;
                    var u = " " === e.Char() || "\t" === e.Char(),
                        c = o && u,
                        f = o && l <= 0 && e.Char() === z.List;
                    f ? (a = !1, i[++r] = "", n[r] = "") : r > -1 && (a ? c || (n[r] += e.Char()) : "?" === e.Char() || "\n" === e.Char() ? a = !0 : i[r] += e.Char()), o = e.Char() === z.Linebreak || c || f, e.Step()
                }
                for (var d = [], g = 0; g < i.length; g++)
                    if ("else" === (v = i[g].trim())) d.push(new B);
                    else {
                        var p = s(v);
                        d.push(p)
                    }
                for (var m = [], g = 0; g < n.length; g++) {
                    var v = n[g],
                        y = new h(new M(A.Dialog), v),
                        w = (y = t(y)).rootNode;
                    m.push(w)
                }
                return e.curNode.AddChild(new V(d, m)), e
            }

            function n(e) {
                return "sequence" === e || "cycle" === e || "shuffle" === e
            }

            function r(e, i) {
                e.Print();
                for (var n = !1, r = [], o = -1, a = 0; !e.Done();) {
                    e.Char() === z.CodeOpen ? a++ : e.Char() === z.CodeClose && a--;
                    var l = " " === e.Char() || "\t" === e.Char(),
                        s = n && l,
                        u = n && a <= 0 && e.Char() === z.List;
                    u ? r[++o] = "" : o > -1 && (s || (r[o] += e.Char())), n = e.Char() === z.Linebreak || s || u, e.Step()
                }
                for (var c = [], f = 0; f < r.length; f++) {
                    var d = r[f],
                        g = new h(new M(A.Dialog, !1), d),
                        p = (g = t(g)).rootNode;
                    c.push(p)
                }
                return "sequence" === i ? e.curNode.AddChild(new N(c)) : "cycle" === i ? e.curNode.AddChild(new _(c)) : "shuffle" === i && e.curNode.AddChild(new F(c)), e
            }

            function o(e, t) {
                function i() {
                    r = r.trim(), console.log("PARAMTER " + r), n.push(l(r)), console.log(n), r = ""
                }
                for (var n = [], r = "";
                    "\n" !== e.Char() && !e.Done();) {
                    if (e.MatchAhead(z.CodeOpen)) {
                        var o = new h(new M(A.Code), e.ConsumeBlock(z.CodeOpen, z.CodeClose)),
                            a = (o = c(o)).rootNode;
                        n.push(a), r = ""
                    } else if (e.MatchAhead(z.String)) {
                        var s = e.ConsumeBlock(z.String, z.String);
                        n.push(new R(s)), r = ""
                    } else " " === e.Char() && r.length > 0 ? i() : r += e.Char();
                    e.Step()
                }
                return r.length > 0 && i(), e.curNode.AddChild(new k(t, n)), e
            }

            function a(e) {
                var t = /^[a-zA-Z_$][a-zA-Z_$0-9]*$/.test(e);
                return console.log("VALID variable??? " + t), t
            }

            function l(e) {
                if (e[0] === z.CodeOpen) {
                    var t = new h(null, e).ConsumeBlock(z.CodeOpen, z.CodeClose),
                        i = new h(new M(A.Code), t);
                    return (i = c(i)).rootNode
                }
                if (e[0] === z.String) {
                    console.log("STRING");
                    for (var n = "", r = 1; r < e.length && e[r] != z.String;) n += e[r], r++;
                    return console.log(n), new R(n)
                }
                return "true" === e ? new R(!0) : "false" === e ? new R(!1) : isNaN(parseFloat(e)) ? a(e) ? new b(e) : new R(null) : new R(parseFloat(e))
            }

            function s(e) {
                function i(t) {
                    for (var i = !1, n = 0; n < e.length; n++)
                        if (e[n] === z.String && (i = !i), t === n) return i;
                    return !1
                }

                function n(t) {
                    for (var i = 0, n = 0; n < e.length; n++)
                        if (e[n] === z.CodeOpen ? i++ : e[n] === z.CodeClose && i--, t === n) return i > 0;
                    return !1
                }

                function r(e) {
                    var i = new h(new M(A.Dialog), e),
                        n = (i = t(i)).rootNode;
                    C.push(n)
                }
                var o = null,
                    u = (e = e.trim()).indexOf(g);
                if (u > -1 && !i(u) && !n(u) && "=" != e[u + 1] && ">" != e[u - 1] && "<" != e[u - 1]) {
                    o = g;
                    var c = e.substring(0, u).trim(),
                        f = a(c) ? new b(c) : new R(null),
                        d = s(e.substring(u + g.length));
                    return T = new O(o, f, d)
                }
                var y = e.indexOf(p);
                if (y > -1 && !i(y) && !n(y)) {
                    o = p;
                    var w = [s(e.substring(0, y).trim())],
                        D = e.substring(y + p.length),
                        C = [],
                        I = D.indexOf(m);
                    if (I > -1) {
                        w.push(new B);
                        var x = D.substring(I + m.length);
                        r((D = D.substring(0, I)).trim()), r(x.trim())
                    } else r(D.trim());
                    return new V(w, C, !0)
                }
                for (var S = 0; null == o && S < v.length; S++) {
                    var E = v[S],
                        P = e.indexOf(E);
                    if (P > -1 && !i(P) && !n(P)) {
                        o = E;
                        var f = s(e.substring(0, P)),
                            d = s(e.substring(P + E.length)),
                            T = new O(o, f, d);
                        return T
                    }
                }
                if (null == o) return l(e)
            }

            function u(e) {
                var t = e.Peak([z.Linebreak]),
                    i = s(t);
                return e.curNode.AddChild(i), e.Step(t.length), e
            }

            function c(e) {
                for (; !e.Done();)
                    if (" " === e.Char() || "\t" === e.Char() || "\n" === e.Char()) e.Step();
                    else if (e.MatchAhead(z.CodeOpen)) e = f(e);
                else if (e.Char() === z.List && e.Peak([]).indexOf("?") > -1) e = i(e);
                else if (d.HasFunction(e.Peak([" "]))) {
                    var t = e.Peak([" "]);
                    e.Step(t.length), e = o(e, t)
                } else if (n(e.Peak([" ", z.Linebreak]))) {
                    var a = e.Peak([" ", z.Linebreak]);
                    e.Step(a.length), e = r(e, a)
                } else e = u(e);
                return e
            }

            function f(e) {
                var t = e.ConsumeBlock(z.CodeOpen, z.CodeClose),
                    i = new h(new M(A.Code), t);
                return i = c(i), e.curNode.AddChild(i.rootNode), e
            }
            var d = e;
            this.Parse = function(e) {
                var i = new h(new M(A.Dialog), e);
                if (i.MatchAhead(z.DialogOpen)) {
                    var n = i.ConsumeBlock(z.DialogOpen, z.DialogClose);
                    i = t(i = new h(new M(A.Dialog), n))
                } else i = t(i);
                return i.rootNode
            }, this.ReadDialogScript = function(e, t) {
                var i = "";
                if (e[t] === z.DialogOpen) {
                    for (i += e[t] + "\n", t++; e[t] != z.DialogClose;) i += e[t] + "\n", t++;
                    i += e[t], t++
                } else i += e[t];
                return {
                    script: i,
                    index: t
                }
            };
            var h = function(e, t) {
                    this.rootNode = e, this.curNode = this.rootNode;
                    var i = t,
                        n = 0;
                    this.Index = function() {
                        return n
                    }, this.Count = function() {
                        return i.length
                    }, this.Done = function() {
                        return n >= i.length
                    }, this.Char = function() {
                        return i[n]
                    }, this.Step = function(e) {
                        void 0 === e && (e = 1), n += e
                    }, this.MatchAhead = function(e) {
                        e = "" + e;
                        for (var t = 0; t < e.length; t++) {
                            if (n + t >= i.length) return !1;
                            if (e[t] != i[n + t]) return !1
                        }
                        return !0
                    }, this.Peak = function(e) {
                        for (var t = "", r = n; r < i.length && -1 == e.indexOf(i[r]);) t += i[r], r++;
                        return t
                    }, this.ConsumeBlock = function(e, t) {
                        var r = n,
                            o = 0;
                        for (this.MatchAhead(e) && (o++, this.Step(e.length)); o > 0 && !this.Done();) this.MatchAhead(t) ? (o--, this.Step(t.length)) : this.MatchAhead(e) ? (o++, this.Step(e.length)) : this.Step();
                        return i.slice(r + e.length, n - t.length)
                    }, this.Print = function() {
                        console.log(i)
                    }
                },
                g = "=",
                p = "?",
                m = ":",
                v = ["-", "+", "/", "*", "<=", ">=", "<", ">", "=="];
            this.CreateExpression = s
        }
}

function Dialog() {
    function e(e, t, i) {
        function n(e, t, i) {
            return i < 0 && (i += 1), i > 1 && (i -= 1), i < 1 / 6 ? e + 6 * (t - e) * i : i < .5 ? t : i < 2 / 3 ? e + (t - e) * (2 / 3 - i) * 6 : e
        }
        var r, o, a;
        if (0 == t) r = o = a = i;
        else {
            var l = i < .5 ? i * (1 + t) : i + t - i * t,
                s = 2 * i - l;
            r = n(s, l, e + 1 / 3), o = n(s, l, e), a = n(s, l, e - 1 / 3)
        }
        return [255 * r, 255 * o, 255 * a]
    }
    this.CreateRenderer = function() {
        return new t
    }, this.CreateBuffer = function() {
        return new i
    };
    var t = function() {
            var e = {
                    img: null,
                    width: 104,
                    height: 19,
                    top: 12,
                    left: 12,
                    bottom: 12
                },
                t = new Font,
                i = null;
            this.AttachContext = function(e) {
                i = e
            }, this.ClearTextbox = function() {
                null != i && (e.img = i.createImageData(e.width * scale, e.height * scale))
            };
            var n = !1;
            this.SetCentered = function(e) {
                n = e
            }, this.DrawTextbox = function() {
                null != i && (n ? i.putImageData(e.img, e.left * scale, (height / 2 - e.height / 2) * scale) : player().y < mapsize / 2 ? i.putImageData(e.img, e.left * scale, (height - e.bottom - e.height) * scale) : i.putImageData(e.img, e.left * scale, e.top * scale))
            };
            var r = [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0];
            this.DrawNextArrow = function() {
                for (var t = (e.height - 5) * scale, i = (e.width - 9) * scale, n = 0; n < 3; n++)
                    for (var o = 0; o < 5; o++)
                        if (1 == r[5 * n + o])
                            for (var a = 0; a < scale; a++)
                                for (var l = 0; l < scale; l++) {
                                    var s = 4 * ((t + n * scale + a) * (e.width * scale) + (i + o * scale + l));
                                    e.img.data[s + 0] = 255, e.img.data[s + 1] = 255, e.img.data[s + 2] = 255, e.img.data[s + 3] = 255
                                }
            }, this.DrawChar = function(i, n, r) {
                i.offset = {
                    x: 0,
                    y: 0
                }, i.SetPosition(n, r), i.ApplyEffects(o);
                for (var a = t.getChar(i.char), l = 4 * scale + 2 * n * scale + 8 * n * 2 + Math.floor(i.offset.y), s = 4 * scale + 6 * r * 2 + Math.floor(i.offset.x), u = 0; u < 8; u++)
                    for (var c = 0; c < 6; c++)
                        if (1 == a[6 * u + c])
                            for (var f = 0; f < 2; f++)
                                for (var d = 0; d < 2; d++) {
                                    var h = 4 * ((l + 2 * u + f) * (e.width * scale) + (s + 2 * c + d));
                                    e.img.data[h + 0] = i.color.r, e.img.data[h + 1] = i.color.g, e.img.data[h + 2] = i.color.b, e.img.data[h + 3] = i.color.a
                                }
                i.OnPrint()
            };
            var o = 0;
            this.Draw = function(e, t) {
                o += t, this.ClearTextbox(), e.ForEachActiveChar(this.DrawChar), e.CanContinue() && this.DrawNextArrow(), this.DrawTextbox(), e.DidPageFinishThisFrame() && null != a && a()
            };
            var a = null;
            this.SetPageFinishHandler = function(e) {
                a = e
            }, this.Reset = function() {
                o = 0
            }
        },
        i = function() {
            function e(e, t) {
                this.char = e, this.effectList = t.slice(), this.color = {
                    r: 255,
                    g: 255,
                    b: 255,
                    a: 255
                }, this.offset = {
                    x: 0,
                    y: 0
                }, this.row = 0, this.col = 0, this.SetPosition = function(e, t) {
                    this.row = e, this.col = t
                }, this.ApplyEffects = function(e) {
                    for (var t = 0; t < this.effectList.length; t++) {
                        var i = this.effectList[t];
                        n[i].DoEffect(this, e)
                    }
                };
                var i = null;
                this.SetPrintHandler = function(e) {
                    i = e
                }, this.OnPrint = function() {
                    null != i && (console.log("PRINT HANDLER ---- DIALOG BUFFER"), i(), i = null)
                }
            }

            function t(t, i, n) {
                for (var r = 0; r < i.length; r++) t.push(new e(i[r], n));
                return t
            }
            var i = [
                    [
                        []
                    ]
                ],
                r = 0,
                o = 0,
                a = 0,
                l = 0,
                s = !1,
                u = [];
            this.CurPage = function() {
                return i[r]
            }, this.CurRow = function() {
                return this.CurPage()[o]
            }, this.CurChar = function() {
                return this.CurRow()[a]
            }, this.CurPageCount = function() {
                return i.length
            }, this.CurRowCount = function() {
                return this.CurPage().length
            }, this.CurCharCount = function() {
                return this.CurRow().length
            }, this.ForEachActiveChar = function(e) {
                for (var t = o + 1, i = 0; i < t; i++)
                    for (var n = this.CurPage()[i], r = i == o ? a + 1 : n.length, l = 0; l < r; l++) {
                        var s = n[l];
                        s && e(s, i, l)
                    }
            }, this.Reset = function() {
                i = [
                    [
                        []
                    ]
                ], r = 0, o = 0, a = 0, s = !1, u = [], c = !1
            }, this.DoNextChar = function() {
                l = 0, a + 1 < this.CurCharCount() ? a++ : o + 1 < this.CurRowCount() ? (o++, a = 0) : (s = !0, f = !0), null != this.CurChar() && this.CurChar().OnPrint()
            }, this.Update = function(e) {
                f = !1, d = !1, s || (l += e) > 50 && this.DoNextChar()
            }, this.Skip = function() {
                for (console.log("SKIPPP"), f = !1, d = !1; o < this.CurRowCount();) this.DoNextChar(), s && (o++, a = 0);
                o = this.CurRowCount() - 1, a = this.CurCharCount() - 1
            }, this.FlipPage = function() {
                d = !0, s = !1, r++, o = 0, a = 0
            }, this.EndDialog = function() {
                console.log("END!!!!"), c = !1
            }, this.Continue = function() {
                return console.log("CONTINUE"), r + 1 < this.CurPageCount() ? (this.FlipPage(), !0) : (this.EndDialog(), !1)
            };
            var c = !1;
            this.IsActive = function() {
                return c
            }, this.CanContinue = function() {
                return s
            }, this.AddText = function(e, n) {
                console.log("ADD TEXT " + e);
                for (var r = e.split(" "), o = i.length - 1, a = i[o].length - 1, l = i[o][a], s = 0; s < r.length; s++) {
                    var f = r[s],
                        d = f.length + (0 == s ? 0 : 1);
                    l.length + d <= 32 || l.length <= 0 ? l = t(l, (0 == s ? "" : " ") + f, u) : 0 == a ? (i[o][a] = l, i[o].push([]), a++, l = t(l = i[o][a], f, u)) : (i[o][a] = l, i.push([]), i[++o].push([]), a = 0, l = t(l = i[o][a], f, u))
                }
                var h = i[i.length - 1],
                    g = h[h.length - 1];
                0 == g.length && h.splice(h.length - 1, 1), 0 == h.length && i.splice(i.length - 1, 1), (g = (h = i[i.length - 1])[h.length - 1]).length > 0 && g[g.length - 1].SetPrintHandler(n), console.log(i), c = !0
            }, this.AddLinebreak = function() {
                var e = i[i.length - 1];
                e.length <= 1 ? (console.log("LINEBREAK - NEW ROW "), e.push([])) : i.push([
                    []
                ]), console.log(i), c = !0
            }, this.HasTextEffect = function(e) {
                return u.indexOf(e) > -1
            }, this.AddTextEffect = function(e) {
                u.push(e)
            }, this.RemoveTextEffect = function(e) {
                u.splice(u.indexOf(e), 1)
            };
            var f = !1;
            this.DidPageFinishThisFrame = function() {
                return f
            };
            var d = !1;
            this.DidFlipPageThisFrame = function() {
                return d
            }
        },
        n = new Map;
    n.rbw = new function() {
        this.DoEffect = function(t, i) {
            var n = e(Math.abs(Math.sin(i / 600 - t.col / 8)), 1, .5);
            t.color.r = n[0], t.color.g = n[1], t.color.b = n[2], t.color.a = 255
        }
    };
    var r = function(e) {
        this.DoEffect = function(t) {
            var i = getPal(curPal())[parseInt(e)];
            console.log(i), t.color.r = i[0], t.color.g = i[1], t.color.b = i[2], t.color.a = 255
        }
    };
    n.clr1 = new r(0), n.clr2 = new r(1), n.clr3 = new r(2), n.wvy = new function() {
        this.DoEffect = function(e, t) {
            e.offset.y += 4 * Math.sin(t / 250 - e.col / 2)
        }
    }, n.shk = new function() {
        function e(e, t, i, n, r) {
            return e(t * n - i * r)
        }
        this.DoEffect = function(t, i) {
            t.offset.y += 3 * e(Math.sin, i, t.col, .1, .5) * e(Math.cos, i, t.col, .3, .2) * e(Math.sin, i, t.row, 2, 1), t.offset.x += 3 * e(Math.cos, i, t.row, .1, 1) * e(Math.sin, i, t.col, 3, .7) * e(Math.cos, i, t.col, .2, .3)
        }
    }
}

function updateNamesFromCurData() {
    names.room = new Map;
    for (id in room) void 0 != room[id].name && null != room[id].name && names.room.set(room[id].name, id);
    names.tile = new Map;
    for (id in tile) void 0 != tile[id].name && null != tile[id].name && names.tile.set(tile[id].name, id);
    names.sprite = new Map;
    for (id in sprite) void 0 != sprite[id].name && null != sprite[id].name && names.sprite.set(sprite[id].name, id);
    names.item = new Map;
    for (id in item) void 0 != item[id].name && null != item[id].name && names.item.set(item[id].name, id)
}

function getEngineVersion() {
    return version.major + "." + version.minor
}

function resetFlags() {
    flags = {
        ROOM_FORMAT: 0
    }
}

function clearGameData() {
    title = "", room = {}, tile = {}, sprite = {}, item = {}, dialog = {}, palette = {
        0: {
            name: null,
            colors: [
                [0, 0, 0],
                [255, 0, 0],
                [255, 255, 255]
            ]
        }
    }, ending = {}, isEnding = !1, variable = {}, imageStore = {
        source: {},
        render: {}
    }, spriteStartLocations = {}, names = {
        room: new Map,
        tile: new Map,
        sprite: new Map,
        item: new Map
    }
}

function getGameNameFromURL() {
    return window.location.hash.substring(1)
}

function attachCanvas(e) {
    (canvas = e).width = width * scale, canvas.height = width * scale, ctx = canvas.getContext("2d"), dialogRenderer.AttachContext(ctx)
}

function load_game(e, t) {
    curGameData = e, dialogBuffer.Reset(), scriptInterpreter.ResetEnvironment(), parseWorld(e), setInitialVariables(), renderImages(), onready(t)
}

function reset_cur_game() {
    null != curGameData && (stopGame(), clearGameData(), load_game(curGameData))
}

function onready(e) {
    void 0 !== e && null !== e || (e = !0), clearInterval(loading_interval), document.addEventListener("keydown", onkeydown), document.addEventListener("keyup", onkeyup), document.addEventListener("touchstart", ontouchstart), document.addEventListener("touchmove", ontouchmove), document.addEventListener("touchend", ontouchend), update_interval = setInterval(update, -1), console.log("TITLE ??? " + e), e && startNarrating(title)
}

function setInitialVariables() {
    for (id in variable) {
        var e = variable[id];
        "true" === e ? e = !0 : "false" === e ? e = !1 : isNaN(parseFloat(e)) || (e = parseFloat(e)), scriptInterpreter.SetVariable(id, e)
    }
    scriptInterpreter.SetOnVariableChangeHandler(onVariableChanged)
}

function breadthFirstSearch(e, t, i) {
    t.trail = [];
    var n = [],
        r = [t];
    for (n.push(posToString(t)); r.length > 0;) {
        var o = r.shift();
        if (o.x == i.x && o.y == i.y) {
            var a = o.trail.splice(0);
            return a.push(o), a
        }
        neighbors(o).forEach(function(t) {
            if (t.x >= 0 && t.x < 16 && t.y >= 0 && t.y < 16) {
                var i = e[t.y][t.x] <= 0,
                    a = -1 == n.indexOf(posToString(t));
                i && a && (t.trail = o.trail.slice(), t.trail.push(o), r.push(t), n.push(posToString(t)))
            }
        })
    }
    return []
}

function posToString(e) {
    return e.x + "," + e.y
}

function pathToString(e) {
    var t = "";
    for (i in e) t += posToString(e[i]) + " ";
    return t
}

function neighbors(e) {
    var t = [];
    return t.push({
        x: e.x + 1,
        y: e.y + 0
    }), t.push({
        x: e.x - 1,
        y: e.y + 0
    }), t.push({
        x: e.x + 0,
        y: e.y + 1
    }), t.push({
        x: e.x + 0,
        y: e.y - 1
    }), t
}

function collisionMap(e) {
    var t = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ];
    for (r in room[e].tilemap)
        for (var i = room[e].tilemap[r], n = 0; n < i.length; n++) - 1 != room[e].walls.indexOf(i[x]) && (t[r][n] = 1);
    for (id in sprite) {
        var o = sprite[id];
        o.room === e && (t[o.y][o.x] = 2)
    }
    return t
}

function getOffset(e) {
    var t = {
            x: 0,
            y: 0
        },
        i = e.target,
        n = i.getBoundingClientRect();
    return t.x += n.left + i.scrollLeft, t.y += n.top + i.scrollTop, t.x = e.clientX - t.x, t.y = e.clientY - t.y, t
}

function stopGame() {
    console.log("stop GAME!"), document.removeEventListener("keydown", onkeydown), clearInterval(update_interval)
}

function loadingAnimation() {
    for (var e = ctx.createImageData(8 * scale, 8 * scale), t = 0; t < 8; t++)
        for (var i = 0; i < 8; i++) {
            var n = 8 * t + i;
            if (1 == loading_anim_data[loading_anim_frame][n])
                for (var r = 0; r < scale; r++)
                    for (var o = 0; o < scale; o++) {
                        var a = 4 * ((t * scale + r) * (8 * scale) + (i * scale + o));
                        e.data[a + 0] = 255, e.data[a + 1] = 255, e.data[a + 2] = 255, e.data[a + 3] = 255
                    }
        }
    ctx.putImageData(e, scale * (width / 2 - 4), scale * (height / 2 - 4)), ++loading_anim_frame >= 5 && (loading_anim_frame = 0)
}

function update() {
    var e = Date.now();
    if (deltaTime = e - prevTime, ctx.fillStyle = "rgb(" + getPal(curPal())[0][0] + "," + getPal(curPal())[0][1] + "," + getPal(curPal())[0][2] + ")", ctx.fillRect(0, 0, canvas.width, canvas.height), isNarrating || isEnding || (updateAnimation(), drawRoom(room[curRoom])), dialogBuffer.IsActive()) dialogRenderer.Draw(dialogBuffer, deltaTime), dialogBuffer.Update(deltaTime);
    else if (!isEnding && (moveSprites(), player().walkingPath.length > 0)) {
        var t = player().walkingPath[player().walkingPath.length - 1];
        ctx.fillStyle = "#fff", ctx.globalAlpha = .5, ctx.fillRect(t.x * tilesize * scale, t.y * tilesize * scale, tilesize * scale, tilesize * scale), ctx.globalAlpha = 1
    }
    dialogBuffer.IsActive() || isEnding || curPlayerDirection != Direction.None && (playerHoldToMoveTimer -= deltaTime) <= 0 && (movePlayer(curPlayerDirection), playerHoldToMoveTimer = 150), prevTime = e, didPlayerMoveThisFrame && null != onPlayerMoved && onPlayerMoved(), didPlayerMoveThisFrame = !1, null != onDialogUpdate && dialogRenderer.SetPageFinishHandler(onDialogUpdate)
}

function updateAnimation() {
    if ((animationCounter += deltaTime) >= animationTime) {
        for (id in sprite) {
            var e = sprite[id];
            e.animation.isAnimated && (e.animation.frameIndex = (e.animation.frameIndex + 1) % e.animation.frameCount)
        }
        for (id in tile) {
            var t = tile[id];
            t.animation.isAnimated && (t.animation.frameIndex = (t.animation.frameIndex + 1) % t.animation.frameCount)
        }
        for (id in item) {
            var i = item[id];
            i.animation.isAnimated && (i.animation.frameIndex = (i.animation.frameIndex + 1) % i.animation.frameCount)
        }
        animationCounter = 0
    }
}

function moveSprites() {
    if ((moveCounter += deltaTime) >= moveTime) {
        for (id in sprite) {
            var e = sprite[id];
            if (e.walkingPath.length > 0) {
                var t = e.walkingPath.shift();
                e.x = t.x, e.y = t.y;
                var i = getEnding(e.room, e.x, e.y),
                    n = getExit(e.room, e.x, e.y),
                    r = getItemIndex(e.room, e.x, e.y);
                if (i) id === playerId && startNarrating(ending[i.id], !0);
                else if (n) e.room = n.dest.room, e.x = n.dest.x, e.y = n.dest.y, id === playerId && (curRoom = n.dest.room);
                else if (r > -1) {
                    var o = room[e.room].items[r];
                    room[e.room].items.splice(r, 1), e.inventory[o.id] ? e.inventory[o.id] += 1 : e.inventory[o.id] = 1, null != onInventoryChanged && onInventoryChanged(o.id), id === playerId && startItemDialog(o.id), e.walkingPath = []
                }
                id === playerId && (didPlayerMoveThisFrame = !0)
            }
        }
        moveCounter = 0
    }
}

function getSpriteAt(e, t) {
    for (id in sprite) {
        var i = sprite[id];
        if (i.room === curRoom && i.x == e && i.y == t) return id
    }
    return null
}

function onkeydown(e) {
    e.keyCode != key.left && e.keyCode != key.right && e.keyCode != key.up && e.keyCode != key.down && isPlayerEmbeddedInEditor || e.preventDefault(), -1 == keyDownList.indexOf(e.keyCode) && (curPlayerDirection = Direction.None, dialogBuffer.IsActive() ? dialogBuffer.CanContinue() ? dialogBuffer.Continue() || (console.log("EXIT DIALOG --- onkeydown"), onExitDialog()) : dialogBuffer.Skip() : isEnding ? reset_cur_game() : (e.keyCode == key.left || e.keyCode == key.a ? curPlayerDirection = Direction.Left : e.keyCode == key.right || e.keyCode == key.d ? curPlayerDirection = Direction.Right : e.keyCode == key.up || e.keyCode == key.w ? curPlayerDirection = Direction.Up : e.keyCode != key.down && e.keyCode != key.s || (curPlayerDirection = Direction.Down), movePlayer(curPlayerDirection), curPlayerDirection != Direction.None && (playerHoldToMoveTimer = 500), e.keyCode === key.r && (e.getModifierState("Control") || e.getModifierState("Meta")) && confirm("Restart the game?") && reset_cur_game()), -1 == keyDownList.indexOf(e.keyCode) && keyDownList.push(e.keyCode), console.log("KEY DOWN " + keyDownList.length), console.log(keyDownList))
}

function movePlayer(e) {
    var t = null;
    curPlayerDirection != Direction.Left || (t = getSpriteLeft()) || isWallLeft() ? curPlayerDirection != Direction.Right || (t = getSpriteRight()) || isWallRight() ? curPlayerDirection != Direction.Up || (t = getSpriteUp()) || isWallUp() ? curPlayerDirection != Direction.Down || (t = getSpriteDown()) || isWallDown() || (player().y += 1, didPlayerMoveThisFrame = !0) : (player().y -= 1, didPlayerMoveThisFrame = !0) : (player().x += 1, didPlayerMoveThisFrame = !0) : (player().x -= 1, didPlayerMoveThisFrame = !0);
    var i = getExit(player().room, player().x, player().y),
        n = getEnding(player().room, player().x, player().y),
        r = getItemIndex(player().room, player().x, player().y);
    if (n) startNarrating(ending[n.id], !0);
    else if (i) player().room = i.dest.room, player().x = i.dest.x, player().y = i.dest.y, curRoom = i.dest.room;
    else if (t) startSpriteDialog(t);
    else if (r > -1) {
        var o = room[player().room].items[r];
        room[player().room].items.splice(r, 1), player().inventory[o.id] ? player().inventory[o.id] += 1 : player().inventory[o.id] = 1, null != onInventoryChanged && onInventoryChanged(o.id), startItemDialog(o.id)
    }
}

function onkeyup(e) {
    e.keyCode != key.left && e.keyCode != key.right && e.keyCode != key.up && e.keyCode != key.down && isPlayerEmbeddedInEditor || e.preventDefault(), -1 != keyDownList.indexOf(e.keyCode) && keyDownList.splice(keyDownList.indexOf(e.keyCode), 1), keyDownList.length <= 0 && (curPlayerDirection = Direction.None), console.log(e.keyCode), console.log("KEY UP " + keyDownList.length), console.log(keyDownList), console.log("_____")
}

function ontouchstart(e) {
    e.preventDefault(), e.changedTouches.length > 0 && (touchInfo.isDown = !0, console.log(e), touchInfo.startX = touchInfo.curX = e.changedTouches[0].clientX, touchInfo.startY = touchInfo.curY = e.changedTouches[0].clientY, console.log("MOUSE DOWN"), console.log(touchInfo), curPlayerDirection = Direction.None)
}

function ontouchmove(e) {
    if (e.preventDefault(), console.log("MOUSE MOVE"), console.log(touchInfo), !dialogBuffer.IsActive() && touchInfo.isDown && e.changedTouches.length > 0) {
        touchInfo.curX = e.changedTouches[0].clientX, touchInfo.curY = e.changedTouches[0].clientY;
        var t = curPlayerDirection;
        console.log(touchInfo.curX - touchInfo.startX), touchInfo.curX - touchInfo.startX <= -swipeDistance ? curPlayerDirection = Direction.Left : touchInfo.curX - touchInfo.startX >= swipeDistance ? curPlayerDirection = Direction.Right : touchInfo.curY - touchInfo.startY <= -swipeDistance ? curPlayerDirection = Direction.Up : touchInfo.curY - touchInfo.startY >= swipeDistance && (curPlayerDirection = Direction.Down), curPlayerDirection != t && (movePlayer(curPlayerDirection), playerHoldToMoveTimer = 300, touchInfo.startX = touchInfo.curX, touchInfo.startY = touchInfo.curY)
    }
}

function ontouchend(e) {
    e.preventDefault(), console.log("MOUSE UP"), console.log(touchInfo), touchInfo.isDown = !1, curPlayerDirection == Direction.None && (dialogBuffer.IsActive() ? dialogBuffer.CanContinue() ? dialogBuffer.Continue() || (console.log("EXIT DIALOG --- onkeydown"), onExitDialog()) : dialogBuffer.Skip() : isEnding && reset_cur_game()), curPlayerDirection = Direction.None
}

function getItemIndex(e, t, i) {
    for (var n = 0; n < room[e].items.length; n++) {
        var r = room[e].items[n];
        if (r.x == t && r.y == i) return n
    }
    return -1
}

function getSpriteLeft() {
    return getSpriteAt(player().x - 1, player().y)
}

function getSpriteRight() {
    return getSpriteAt(player().x + 1, player().y)
}

function getSpriteUp() {
    return getSpriteAt(player().x, player().y - 1)
}

function getSpriteDown() {
    return getSpriteAt(player().x, player().y + 1)
}

function isWallLeft() {
    return isWall(player().x - 1, player().y) || player().x - 1 < 0
}

function isWallRight() {
    return isWall(player().x + 1, player().y) || player().x + 1 >= 16
}

function isWallUp() {
    return isWall(player().x, player().y - 1) || player().y - 1 < 0
}

function isWallDown() {
    return isWall(player().x, player().y + 1) || player().y + 1 >= 16
}

function isWall(e, t) {
    return getRoom().walls.indexOf(getTile(e, t)) > -1
}

function getItem(e, t, n) {
    for (i in room[e].items) {
        var r = room[e].items[i];
        if (t == r.x && n == r.y) return r
    }
    return null
}

function getExit(e, t, n) {
    for (i in room[e].exits) {
        var r = room[e].exits[i];
        if (t == r.x && n == r.y) return r
    }
    return null
}

function getEnding(e, t, n) {
    for (i in room[e].endings) {
        var r = room[e].endings[i];
        if (t == r.x && n == r.y) return r
    }
    return null
}

function getTile(e, t) {
    return getRoom().tilemap[t][e]
}

function player() {
    return sprite[playerId]
}

function getPal(e) {
    return palette[e].colors
}

function getRoom() {
    return room[curRoom]
}

function isSpriteOffstage(e) {
    return null == sprite[e].room
}

function parseWorld(e) {
    resetFlags();
    for (var t = e.split("\n"), i = 0; i < t.length;) {
        var n = t[i];
        0 == i ? i = parseTitle(t, i) : n.length <= 0 || "#" === n.charAt(0) ? i++ : "PAL" == getType(n) ? i = parsePalette(t, i) : "ROOM" === getType(n) || "SET" === getType(n) ? i = parseRoom(t, i) : "TIL" === getType(n) ? i = parseTile(t, i) : "SPR" === getType(n) ? i = parseSprite(t, i) : "ITM" === getType(n) ? i = parseItem(t, i) : "DRW" === getType(n) ? i = parseDrawing(t, i) : "DLG" === getType(n) ? i = parseDialog(t, i) : "END" === getType(n) ? i = parseEnding(t, i) : "VAR" === getType(n) ? i = parseVariable(t, i) : "!" === getType(n) ? i = parseFlag(t, i) : i++
    }
    placeSprites(), null != player().room && (curRoom = player().room), console.log(names)
}

function serializeWorld() {
    var e = "";
    e += title + "\n", e += "\n", e += "# BITSY VERSION " + getEngineVersion() + "\n", e += "\n";
    for (f in flags) e += "! " + f + " " + flags[f] + "\n";
    e += "\n";
    for (id in palette) {
        e += "PAL " + id + "\n", null != palette[id].name && (e += "NAME " + palette[id].name + "\n");
        for (i in getPal(id)) {
            for (j in getPal(id)[i]) e += getPal(id)[i][j], j < 2 && (e += ",");
            e += "\n"
        }
        e += "\n"
    }
    for (id in room) {
        if (e += "ROOM " + id + "\n", 0 == flags.ROOM_FORMAT)
            for (i in room[id].tilemap) {
                for (j in room[id].tilemap[i]) e += room[id].tilemap[i][j];
                e += "\n"
            } else if (1 == flags.ROOM_FORMAT)
                for (i in room[id].tilemap) {
                    for (j in room[id].tilemap[i]) e += room[id].tilemap[i][j], j < room[id].tilemap[i].length - 1 && (e += ",");
                    e += "\n"
                }
        if (null != room[id].name && (e += "NAME " + room[id].name + "\n"), room[id].walls.length > 0) {
            e += "WAL ";
            for (j in room[id].walls) e += room[id].walls[j], j < room[id].walls.length - 1 && (e += ",");
            e += "\n"
        }
        if (room[id].items.length > 0)
            for (j in room[id].items) {
                var t = room[id].items[j];
                e += "ITM " + t.id + " " + t.x + "," + t.y, e += "\n"
            }
        if (room[id].exits.length > 0)
            for (j in room[id].exits) isExitValid(n = room[id].exits[j]) && (e += "EXT " + n.x + "," + n.y + " " + n.dest.room + " " + n.dest.x + "," + n.dest.y, e += "\n");
        if (room[id].endings.length > 0)
            for (j in room[id].endings) {
                var n = room[id].endings[j];
                e += "END " + n.id + " " + n.x + "," + n.y, e += "\n"
            }
        null != room[id].pal && (e += "PAL " + room[id].pal + "\n"), e += "\n"
    }
    for (id in tile) e += "TIL " + id + "\n", e += serializeDrawing("TIL_" + id), null != tile[id].name && void 0 != tile[id].name && (e += "NAME " + tile[id].name + "\n"), e += "\n";
    for (id in sprite) {
        if (e += "SPR " + id + "\n", e += serializeDrawing("SPR_" + id), null != sprite[id].name && void 0 != sprite[id].name && (e += "NAME " + sprite[id].name + "\n"), null != sprite[id].dlg && (e += "DLG " + sprite[id].dlg + "\n"), null != sprite[id].room && (e += "POS " + sprite[id].room + " " + sprite[id].x + "," + sprite[id].y + "\n"), null != sprite[id].inventory)
            for (itemId in sprite[id].inventory) e += "ITM " + itemId + " " + sprite[id].inventory[itemId] + "\n";
        e += "\n"
    }
    for (id in item) e += "ITM " + id + "\n", e += serializeDrawing("ITM_" + id), null != item[id].name && void 0 != item[id].name && (e += "NAME " + item[id].name + "\n"), null != item[id].dlg && (e += "DLG " + item[id].dlg + "\n"), e += "\n";
    for (id in dialog) e += "DLG " + id + "\n", e += dialog[id] + "\n", e += "\n";
    for (id in ending) e += "END " + id + "\n", e += ending[id] + "\n", e += "\n";
    for (id in variable) e += "VAR " + id + "\n", e += variable[id] + "\n", e += "\n";
    return e
}

function serializeDrawing(e) {
    var t = "";
    for (f in imageStore.source[e]) {
        for (y in imageStore.source[e][f]) {
            var i = "";
            for (x in imageStore.source[e][f][y]) i += imageStore.source[e][f][y][x];
            t += i + "\n"
        }
        f < imageStore.source[e].length - 1 && (t += ">\n")
    }
    return t
}

function isExitValid(e) {
    var t = e.x >= 0 && e.x < 16 && e.y >= 0 && e.y < 16,
        i = null != e.dest,
        n = null != e.dest.room && e.dest.x >= 0 && e.dest.x < 16 && e.dest.y >= 0 && e.dest.y < 16;
    return t && i && n
}

function placeSprites() {
    for (id in spriteStartLocations) sprite[id].room = spriteStartLocations[id].room, sprite[id].x = spriteStartLocations[id].x, sprite[id].y = spriteStartLocations[id].y
}

function getType(e) {
    return getArg(e, 0)
}

function getId(e) {
    return getArg(e, 1)
}

function getArg(e, t) {
    return e.split(" ")[t]
}

function getCoord(e, t) {
    return getArg(e, t).split(",")
}

function parseTitle(e, t) {
    return title = e[t], ++t
}

function parseRoom(e, t) {
    var i = getId(e[t]);
    if (room[i] = {
            id: i,
            tilemap: [],
            walls: [],
            exits: [],
            endings: [],
            items: [],
            pal: null,
            name: null
        }, t++, 0 == flags.ROOM_FORMAT)
        for (var n = t + mapsize, r = 0; t < n; t++) {
            for (room[i].tilemap.push([]), x = 0; x < mapsize; x++) room[i].tilemap[r].push(e[t].charAt(x));
            r++
        } else if (1 == flags.ROOM_FORMAT)
            for (var n = t + mapsize, r = 0; t < n; t++) {
                room[i].tilemap.push([]);
                var o = e[t].split(",");
                for (x = 0; x < mapsize; x++) room[i].tilemap[r].push(o[x]);
                r++
            }
    for (; t < e.length && e[t].length > 0;) {
        if ("SPR" === getType(e[t])) {
            var a = getId(e[t]);
            if (-1 == a.indexOf(",") && e[t].split(" ").length >= 3) {
                var l = e[t].split(" ")[2].split(",");
                spriteStartLocations[a] = {
                    room: i,
                    x: parseInt(l[0]),
                    y: parseInt(l[1])
                }
            } else if (0 == flags.ROOM_FORMAT) {
                var u = a.split(",");
                for (row in room[i].tilemap)
                    for (s in u) {
                        var c = room[i].tilemap[row].indexOf(u[s]); - 1 != c && (room[i].tilemap[row][c] = "0", spriteStartLocations[u[s]] = {
                            room: i,
                            x: parseInt(c),
                            y: parseInt(row)
                        })
                    }
            }
        } else if ("ITM" === getType(e[t])) {
            var f = getId(e[t]),
                d = e[t].split(" ")[2].split(","),
                h = {
                    id: f,
                    x: parseInt(d[0]),
                    y: parseInt(d[1])
                };
            room[i].items.push(h)
        } else if ("WAL" === getType(e[t])) room[i].walls = getId(e[t]).split(",");
        else if ("EXT" === getType(e[t])) {
            var g = e[t].split(" "),
                p = g[1].split(","),
                m = g[2],
                v = g[3].split(","),
                y = {
                    x: parseInt(p[0]),
                    y: parseInt(p[1]),
                    dest: {
                        room: m,
                        x: parseInt(v[0]),
                        y: parseInt(v[1])
                    }
                };
            room[i].exits.push(y)
        } else if ("END" === getType(e[t])) {
            var w = getId(e[t]),
                D = getCoord(e[t], 2),
                n = {
                    id: w,
                    x: parseInt(D[0]),
                    y: parseInt(D[1])
                };
            room[i].endings.push(n)
        } else if ("PAL" === getType(e[t])) room[i].pal = getId(e[t]);
        else if ("NAME" === getType(e[t])) {
            var C = e[t].split(/\s(.+)/)[1];
            room[i].name = C, names.room.set(C, i)
        }
        t++
    }
    return t
}

function parsePalette(e, t) {
    var i = getId(e[t]);
    t++;
    for (var n = [], r = null; t < e.length && e[t].length > 0;) {
        if ("NAME" === e[t].split(" ")[0]) r = e[t].split(/\s(.+)/)[1];
        else {
            var o = [];
            e[t].split(",").forEach(function(e) {
                o.push(parseInt(e))
            }), n.push(o)
        }
        t++
    }
    return palette[i] = {
        name: r,
        colors: n
    }, t
}

function parseTile(e, t) {
    var i = getId(e[t]),
        n = null,
        r = null;
    "DRW" === getType(e[++t]) ? (n = getId(e[t]), t++) : t = parseDrawingCore(e, t, n = "TIL_" + i);
    for (var o = 1; t < e.length && e[t].length > 0;) "COL" === getType(e[t]) ? o = parseInt(getId(e[t])) : "NAME" === getType(e[t]) && (r = e[t].split(/\s(.+)/)[1], names.tile.set(r, i)), t++;
    return tile[i] = {
        drw: n,
        col: o,
        animation: {
            isAnimated: imageStore.source[n].length > 1,
            frameIndex: 0,
            frameCount: imageStore.source[n].length
        },
        name: r
    }, t
}

function parseSprite(e, t) {
    var i = getId(e[t]),
        n = null,
        r = null;
    "DRW" === getType(e[++t]) ? (n = getId(e[t]), t++) : t = parseDrawingCore(e, t, n = "SPR_" + i);
    for (var o = 2, a = null, l = {}; t < e.length && e[t].length > 0;) {
        if ("COL" === getType(e[t])) o = parseInt(getId(e[t]));
        else if ("POS" === getType(e[t])) {
            var s = e[t].split(" "),
                u = s[1],
                c = s[2].split(",");
            spriteStartLocations[i] = {
                room: u,
                x: parseInt(c[0]),
                y: parseInt(c[1])
            }
        } else if ("DLG" === getType(e[t])) a = getId(e[t]);
        else if ("NAME" === getType(e[t])) r = e[t].split(/\s(.+)/)[1], names.sprite.set(r, i);
        else if ("ITM" === getType(e[t])) {
            var f = getId(e[t]),
                d = parseFloat(getArg(e[t], 2));
            l[f] = d
        }
        t++
    }
    return sprite[i] = {
        drw: n,
        col: o,
        dlg: a,
        room: null,
        x: -1,
        y: -1,
        walkingPath: [],
        animation: {
            isAnimated: imageStore.source[n].length > 1,
            frameIndex: 0,
            frameCount: imageStore.source[n].length
        },
        inventory: l,
        name: r
    }, t
}

function parseItem(e, t) {
    var i = getId(e[t]),
        n = null,
        r = null;
    "DRW" === getType(e[++t]) ? (n = getId(e[t]), t++) : t = parseDrawingCore(e, t, n = "ITM_" + i);
    for (var o = 2, a = null; t < e.length && e[t].length > 0;) "COL" === getType(e[t]) ? o = parseInt(getArg(e[t], 1)) : "DLG" === getType(e[t]) ? a = getId(e[t]) : "NAME" === getType(e[t]) && (r = e[t].split(/\s(.+)/)[1], names.item.set(r, i)), t++;
    return item[i] = {
        drw: n,
        col: o,
        dlg: a,
        animation: {
            isAnimated: imageStore.source[n].length > 1,
            frameIndex: 0,
            frameCount: imageStore.source[n].length
        },
        name: r
    }, t
}

function parseDrawing(e, t) {
    return parseDrawingCore(e, t, getId(e[t]))
}

function parseDrawingCore(e, t, i) {
    imageStore.source[i] = [], imageStore.source[i].push([]);
    for (var n = 0, r = 0; r < tilesize;) {
        var o = e[t + r],
            a = [];
        for (x = 0; x < tilesize; x++) a.push(parseInt(o.charAt(x)));
        imageStore.source[i][n].push(a), ++r === tilesize && void 0 != e[t += r] && ">" === e[t].charAt(0) && (imageStore.source[i].push([]), n++, t++, r = 0)
    }
    return t
}

function renderImages() {
    console.log(" -- RENDER IMAGES -- ");
    for (pal in palette) imageStore.render[pal] = {
        1: {},
        2: {}
    };
    for (s in sprite) renderImageForAllPalettes(sprite[s]);
    for (t in tile) renderImageForAllPalettes(tile[t]);
    for (i in item) renderImageForAllPalettes(item[i])
}

function renderImageForAllPalettes(e) {
    console.log("RENDER IMAGE");
    for (pal in palette) {
        console.log(pal);
        var t = e.col,
            i = "" + t;
        console.log(e), console.log(e.drw), console.log(imageStore);
        var n = imageStore.source[e.drw];
        if (n.length <= 1) o = n[0], console.log(e), console.log(imageStore), imageStore.render[pal][i][e.drw] = imageDataFromImageSource(o, pal, t);
        else {
            var r = 0;
            for (f in n) {
                var o = n[f],
                    a = e.drw + "_" + r;
                imageStore.render[pal][i][a] = imageDataFromImageSource(o, pal, t), r++
            }
        }
    }
}

function imageDataFromImageSource(e, t, i) {
    for (var n = ctx.createImageData(tilesize * scale, tilesize * scale), r = 0; r < tilesize; r++)
        for (var o = 0; o < tilesize; o++)
            for (var a = e[r][o], l = 0; l < scale; l++)
                for (var s = 0; s < scale; s++) {
                    var u = (r * scale + l) * tilesize * scale * 4 + 4 * (o * scale + s);
                    1 === a ? (n.data[u + 0] = getPal(t)[i][0], n.data[u + 1] = getPal(t)[i][1], n.data[u + 2] = getPal(t)[i][2], n.data[u + 3] = 255) : (n.data[u + 0] = getPal(t)[0][0], n.data[u + 1] = getPal(t)[0][1], n.data[u + 2] = getPal(t)[0][2], n.data[u + 3] = 255)
                }
    return n
}

function parseDialog(e, t) {
    var i = getId(e[t]);
    t++;
    var n = scriptInterpreter.ReadDialogScript(e, t);
    return dialog[i] = n.script, t = n.index
}

function parseEnding(e, t) {
    var i = getId(e[t]),
        n = e[++t];
    return t++, ending[i] = n, t
}

function parseVariable(e, t) {
    var i = getId(e[t]),
        n = e[++t];
    return t++, variable[i] = n, t
}

function parseFlag(e, t) {
    var i = getId(e[t]),
        n = e[t].split(" ")[2];
    return flags[i] = parseInt(n), ++t
}

function drawTile(e, t, i, n) {
    n || (n = ctx), n.putImageData(e, t * tilesize * scale, i * tilesize * scale)
}

function drawSprite(e, t, i, n) {
    drawTile(e, t, i, n)
}

function drawItem(e, t, i, n) {
    drawTile(e, t, i, n)
}

function drawRoom(e, t) {
    for (n in e.tilemap)
        for (j in e.tilemap[n]) {
            var i = e.tilemap[n][j];
            "0" != i && (null == tile[i] ? (i = "0", e.tilemap[n][j] = i) : drawTile(getTileImage(tile[i], getRoomPal(e.id)), j, n, t))
        }
    for (var n = 0; n < e.items.length; n++) {
        var r = e.items[n];
        drawItem(getItemImage(item[r.id], getRoomPal(e.id)), r.x, r.y, t)
    }
    for (i in sprite) {
        var o = sprite[i];
        o.room === e.id && drawSprite(getSpriteImage(o, getRoomPal(e.id)), o.x, o.y, t)
    }
}

function getTileImage(e, t, i) {
    void 0 === i && (i = null);
    var n = e.drw;
    return t || (t = curPal()), e.animation.isAnimated && (n += null != i ? "_" + i : "_" + e.animation.frameIndex), imageStore.render[t][e.col][n]
}

function getSpriteImage(e, t, i) {
    void 0 === i && (i = null);
    var n = e.drw;
    return t || (t = curPal()), e.animation.isAnimated && (n += null != i ? "_" + i : "_" + e.animation.frameIndex), imageStore.render[t][e.col][n]
}

function getItemImage(e, t, i) {
    void 0 === i && (i = null);
    var n = e.drw;
    return t || (t = curPal()), e.animation.isAnimated && (n += null != i ? "_" + i : "_" + e.animation.frameIndex), imageStore.render[t][e.col][n]
}

function curPal() {
    return getRoomPal(curRoom)
}

function getRoomPal(e) {
    return null != room[e].pal ? room[e].pal : e in palette ? e : "0"
}

function onExitDialog() {
    console.log("EXIT DIALOG"), isDialogMode = !1, isNarrating && (isNarrating = !1), isDialogPreview && (isDialogPreview = !1, null != onDialogPreviewEnd && onDialogPreviewEnd())
}

function startNarrating(e, t) {
    console.log("NARRATE " + e), void 0 === t && (t = !1), isNarrating = !0, isEnding = t, startDialog(e)
}

function startItemDialog(e) {
    var t = item[e].dlg;
    dialog[t] && startDialog(dialog[t], t)
}

function startSpriteDialog(e) {
    var t = sprite[e],
        i = t.dlg ? t.dlg : e;
    dialog[i] && startDialog(dialog[i], i)
}

function startDialog(e, t) {
    if (e.length <= 0) return console.log("ON EXIT DIALOG -- startDialog 1"), void onExitDialog();
    isDialogMode = !0, dialogRenderer.Reset(), dialogRenderer.SetCentered(isNarrating), dialogBuffer.Reset(), scriptInterpreter.SetDialogBuffer(dialogBuffer);
    var i = function() {
        dialogBuffer.IsActive() || (console.log("ON EXIT DIALOG -- startDialog 2"), onExitDialog())
    };
    void 0 === t ? scriptInterpreter.Interpret(e, i) : (scriptInterpreter.HasScript(t) || scriptInterpreter.Compile(t, e), scriptInterpreter.Run(t, i))
}

function startPreviewDialog(e, t) {
    isNarrating = !0, isDialogMode = !0, isDialogPreview = !0, dialogRenderer.Reset(), dialogRenderer.SetCentered(!0), dialogBuffer.Reset(), scriptInterpreter.SetDialogBuffer(dialogBuffer), onDialogPreviewEnd = t, scriptInterpreter.Eval(e, null)
}
var xhr, canvas, context, ctx, title = "",
    room = {},
    tile = {},
    sprite = {},
    item = {},
    dialog = {},
    palette = {
        0: [
            [0, 0, 0],
            [255, 0, 0],
            [255, 255, 255]
        ]
    },
    ending = {},
    variable = {},
    playerId = "A",
    names = {
        room: new Map,
        tile: new Map,
        sprite: new Map,
        item: new Map
    },
    imageStore = {
        source: {},
        render: {}
    },
    spriteStartLocations = {},
    version = {
        major: 4,
        minor: 3
    },
    flags;
resetFlags();
var width = 128,
    height = 128,
    scale = 4,
    tilesize = 8,
    mapsize = 16,
    curRoom = "0",
    key = {
        left: 37,
        right: 39,
        up: 38,
        down: 40,
        space: 32,
        enter: 13,
        w: 87,
        a: 65,
        s: 83,
        d: 68,
        r: 82
    },
    prevTime = 0,
    deltaTime = 0,
    didPlayerMoveThisFrame = !1,
    onPlayerMoved = null,
    onDialogUpdate = null,
    onInventoryChanged = null,
    onVariableChanged = null,
    isPlayerEmbeddedInEditor = !1,
    curGameData = null,
    update_interval = null,
    loading_anim_data = [
        [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
    ],
    loading_anim_frame = 0,
    loading_anim_speed = 500,
    loading_interval = null,
    animationCounter = 0,
    animationTime = 400,
    moveCounter = 0,
    moveTime = 200,
    Direction = {
        None: -1,
        Up: 0,
        Down: 1,
        Left: 2,
        Right: 3
    },
    curPlayerDirection = Direction.None,
    playerHoldToMoveTimer = 0,
    keyDownList = [],
    touchInfo = {
        isDown: !1,
        startX: 0,
        startY: 0,
        curX: 0,
        curY: 0
    },
    swipeDistance = 30,
    isDialogMode = !1,
    isNarrating = !1,
    isEnding = !1,
    dialogModule = new Dialog,
    dialogRenderer = dialogModule.CreateRenderer(),
    dialogBuffer = dialogModule.CreateBuffer(),
    isDialogPreview = !1,
    scriptModule = new Script,
    scriptInterpreter = scriptModule.CreateInterpreter(),
    scriptUtils = scriptModule.CreateUtils();